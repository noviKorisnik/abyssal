@use 'sass:map';

// === VARIABLES ===
// Base color settings
$base-saturation: 70%;
$base-lightness: 50%;
$dark-lightness: 35%; // For sunk states

// Player colors - equidistant hues from blue background (72Â° apart)
$player-colors: (
  0: hsl(312, $base-saturation, $base-lightness), // Red-Orange
  1: hsl(24, $base-saturation, $base-lightness),  // Yellow-Orange  
  2: hsl(96, $base-saturation, $base-lightness),  // Yellow-Green
  3: hsl(168, $base-saturation, $base-lightness)  // Teal
);

// Player dark colors for sunk state (same hue, reduced lightness)
$player-dark-colors: (
  0: hsl(312, $base-saturation, $dark-lightness), // Dark Red-Orange
  1: hsl(24, $base-saturation, $dark-lightness),  // Dark Yellow-Orange
  2: hsl(96, $base-saturation, $dark-lightness),  // Dark Yellow-Green  
  3: hsl(168, $base-saturation, $dark-lightness)  // Dark Teal
);

// Disc sizes
$small-disc-size: 6px;
$large-disc-size: 20px;

// Positioning
$corner-offset: 3px;

// Opacity levels
$setup-open-opacity: 0.5;
$setup-hit-opacity: 0.7;
$setup-sunk-opacity: 1;

// Board background - blue gradient using HSL
$board-hue: 240; // Blue base
$board-saturation: 80%;

// === BOARD STYLES ===
.board {
  display: flex;
  flex-direction: column;
  gap: 2px;
  margin: 1rem auto;
  width: fit-content;
  background: linear-gradient(180deg, 
    hsl($board-hue, $board-saturation, 70%) 0%,   // Light blue
    hsl($board-hue, $board-saturation, 55%) 25%,  // Medium-light blue
    hsl($board-hue, $board-saturation, 35%) 50%,  // Medium blue  
    hsl($board-hue, $board-saturation, 25%) 75%,  // Dark blue
    hsl($board-hue, $board-saturation, 15%) 100%  // Very dark blue
  );
  border-radius: 8px;
  padding: 8px;
  border: 3px solid transparent;
  transition: all 0.3s ease;

  // Mobile: reduce padding and margin
  @media (max-width: 480px) {
    margin: 0.5rem auto;
    padding: 6px;
    gap: 1px;
  }

  // Visual feedback when it's your turn
  &.your-turn {
    border: 3px solid rgba(255, 255, 255, 0.6);
    box-shadow: 0 0 0 3px rgba(255, 255, 255, 0.2),
                0 0 20px rgba(255, 255, 255, 0.3);
    animation: board-pulse 2s ease-in-out infinite;
  }
}

@keyframes board-pulse {
  0%, 100% {
    box-shadow: 0 0 0 3px rgba(255, 255, 255, 0.2),
                0 0 20px rgba(255, 255, 255, 0.3);
  }
  50% {
    box-shadow: 0 0 0 3px rgba(255, 255, 255, 0.4),
                0 0 25px rgba(255, 255, 255, 0.5);
  }
}

.row {
  display: flex;
  gap: 2px;
}

.cell-wrapper {
  width: 32px;
  height: 32px;
}

.cell {
  width: 100%;
  height: 100%;
  background: transparent;
  border: 1px solid rgba(255, 255, 255, 0.25);
  position: relative;
  cursor: default;
  transition: background 0.2s, border 0.2s;
}

.cell > div {
  position: absolute;
  width: 100%;
  height: 100%;
  top: 0;
  left: 0;
  pointer-events: none;
}

.cell > div:nth-child(2) {
  z-index: 1; /* Setup circles behind hit/sunk markers */
}

.cell.active:not(.cell-picked) {
  cursor: pointer;
}

.cell-picked {
  background: rgba(255, 255, 255, 0.2);
}

.cell-player-picked {
  background: rgba(255, 255, 255, 0.2);
}

// === PLAYER MARKERS (HITS/SINKS) ===
// Common disc style
.cell-player-disc {
  content: '';
  position: absolute;
  width: $small-disc-size;
  height: $small-disc-size;
  border-radius: 50%;
  z-index: 2;
}

.cell-player-disc-sunk {
  box-shadow: 0 0 0 1px #fff;
}

// Player 0 (top-left) and 1 (top-right) on parent div
.cell-player-0-hit::before, .cell-player-0-sunk::before {
  @extend .cell-player-disc;
  top: $corner-offset; 
  left: $corner-offset;
  border: 1px solid map.get($player-colors, 0);
  background: transparent;
}

.cell-player-0-sunk::before {
  @extend .cell-player-disc-sunk;
  background: map.get($player-colors, 0);
}

.cell-player-1-hit::after, .cell-player-1-sunk::after {
  @extend .cell-player-disc;
  top: $corner-offset; 
  right: $corner-offset;
  border: 1px solid map.get($player-colors, 1);
  background: transparent;
}

.cell-player-1-sunk::after {
  @extend .cell-player-disc-sunk;
  background: map.get($player-colors, 1);
}

// Player 2 (bottom-left) and 3 (bottom-right) on child div
.cell-player-2-hit div::before, .cell-player-2-sunk div::before {
  @extend .cell-player-disc;
  bottom: $corner-offset; 
  left: $corner-offset;
  border: 1px solid map.get($player-colors, 2);
  background: transparent;
}

.cell-player-2-sunk div::before {
  @extend .cell-player-disc-sunk;
  background: map.get($player-colors, 2);
}

.cell-player-3-hit div::after, .cell-player-3-sunk div::after {
  @extend .cell-player-disc;
  bottom: $corner-offset; 
  right: $corner-offset;
  border: 1px solid map.get($player-colors, 3);
  background: transparent;
}

.cell-player-3-sunk div::after {
  @extend .cell-player-disc-sunk;
  background: map.get($player-colors, 3);
}

// === PLAYER SETUP CIRCLES ===
.cell-setup-disc {
  content: '';
  position: absolute;
  width: $large-disc-size;
  height: $large-disc-size;
  border-radius: 50%;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  z-index: 1;
}

// Generate setup styles for all players
@for $i from 0 through 3 {
  .cell-setup-player-#{$i}-open div:nth-child(2)::before {
    @extend .cell-setup-disc;
    background: map.get($player-colors, $i);
    opacity: $setup-open-opacity;
  }
  .cell-setup-player-#{$i}-hit div:nth-child(2)::before {
    @extend .cell-setup-disc;
    background: map.get($player-colors, $i);
    opacity: $setup-hit-opacity;
  }
  .cell-setup-player-#{$i}-sunk div:nth-child(2)::before {
    @extend .cell-setup-disc;
    background: map.get($player-dark-colors, $i);
    opacity: $setup-sunk-opacity;
  }
}
